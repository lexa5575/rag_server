#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
"""

import requests
import json
import time

BASE_URL = "http://127.0.0.1:8200"

def test_long_response():
    """–¢–µ—Å—Ç –Ω–∞ –æ–±—Ä–µ–∑–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")
    
    # –ó–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    response = requests.post(f"{BASE_URL}/tool/ask_rag", json={
        "query": "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ –≤—Å–µ—Ö —Ö—É–∫–∞—Ö –≤ Vue 3 Composition API —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ",
        "framework": "vue",
        "max_results": 10
    })
    
    if response.status_code == 200:
        data = response.json()
        answer = data.get('answer', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –æ–±—Ä—ã–≤–∞–µ—Ç—Å—è
        print(f"   –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(answer)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        artifacts = ['Created Question', 'Created Answer', 'Human:', 'Assistant:', '```\n```']
        found_artifacts = []
        for artifact in artifacts:
            if artifact in answer:
                found_artifacts.append(artifact)
        
        if found_artifacts:
            print(f"   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: {found_artifacts}")
        else:
            print("   ‚úÖ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –æ–±—Ä—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ —Å–ª–æ–≤–∞
        if answer and answer[-1] in '.!?;:)]\'"¬ª':
            print("   ‚úÖ –û—Ç–≤–µ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print(f"   ‚ö†Ô∏è –û—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω. –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã: '{answer[-20:]}'")
        
        return True
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
        return False

def test_json_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON"""
    print("\nüîç –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON
    response = requests.post(
        f"{BASE_URL}/tool/ask_rag",
        data='{"query": "test", invalid json}',
        headers={'Content-Type': 'application/json'}
    )
    
    if response.status_code == 400:
        try:
            data = response.json()
            if 'error' in data:
                print(f"   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏: {data['error']}")
                return True
            else:
                print("   ‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è error")
                return False
        except:
            print("   ‚ùå –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON")
            return False
    else:
        print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
        return False

def test_path_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Ç–µ–π —Ñ–∞–π–ª–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Ç–µ–π —Ñ–∞–π–ª–æ–≤")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –≤–Ω–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    dangerous_paths = [
        "/etc/passwd",
        "../../../etc/passwd",
        "~/.ssh/id_rsa",
        "/Users/aleksejcuprynin/.ssh/id_rsa"
    ]
    
    for path in dangerous_paths:
        response = requests.post(f"{BASE_URL}/tool/open_file", json={
            "path": path
        })
        
        if response.status_code == 500:
            data = response.json()
            if "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" in data.get('error', ''):
                print(f"   ‚úÖ –ü—É—Ç—å {path} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            else:
                print(f"   ‚ö†Ô∏è –ü—É—Ç—å {path} - –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {data.get('error', '')}")
        else:
            print(f"   ‚ùå –ü—É—Ç—å {path} - –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω!")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –≤ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    safe_path = "../config.yaml"  # config.yaml –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    response = requests.post(f"{BASE_URL}/tool/open_file", json={
        "path": safe_path
    })
    
    if response.status_code == 200:
        print(f"   ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å {safe_path} –¥–æ—Å—Ç—É–ø–µ–Ω")
        return True
    else:
        print(f"   ‚ùå –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å {safe_path} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False

def test_model_availability():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π"""
    print("\nüîç –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
    response = requests.post(f"{BASE_URL}/tool/list_models", json={})
    
    if response.status_code == 200:
        data = response.json()
        models = data.get('models', [])
        default_model = data.get('default', '')
        
        print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {len(models)}")
        print(f"   –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_model}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å –º–æ–¥–µ–ª—å—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        response = requests.post(f"{BASE_URL}/tool/ask_rag", json={
            "query": "–ß—Ç–æ —Ç–∞–∫–æ–µ ref –≤ Vue?",
            "framework": "vue",
            "max_results": 1
        })
        
        if response.status_code == 200:
            print(f"   ‚úÖ –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ({default_model}) —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"   ‚ùå –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ({default_model}) –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return False
    else:
        print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π")
        return False

def test_response_cleaning():
    """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç 5: –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
    
    # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å—Ç–æ—Ç—É –æ—Ç–≤–µ—Ç–æ–≤
    test_queries = [
        {"query": "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç?", "framework": "vue"},
        {"query": "–ß—Ç–æ —Ç–∞–∫–æ–µ Eloquent?", "framework": "laravel"},
        {"query": "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç v-model?", "framework": "vue"}
    ]
    
    clean_responses = 0
    for test_query in test_queries:
        response = requests.post(f"{BASE_URL}/tool/ask_rag", json=test_query)
        
        if response.status_code == 200:
            data = response.json()
            answer = data.get('answer', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
            is_clean = True
            if 'Created Question' in answer or 'Created Answer' in answer:
                is_clean = False
            if answer.count('```') % 2 != 0:  # –ù–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
                is_clean = False
            if answer.endswith('```'):
                is_clean = False
            
            if is_clean:
                clean_responses += 1
                print(f"   ‚úÖ –ó–∞–ø—Ä–æ—Å '{test_query['query'][:30]}...' - —á–∏—Å—Ç—ã–π –æ—Ç–≤–µ—Ç")
            else:
                print(f"   ‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å '{test_query['query'][:30]}...' - –Ω–∞–π–¥–µ–Ω—ã –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã")
    
    success_rate = clean_responses / len(test_queries) * 100
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —á–∏—Å—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {success_rate:.0f}%")
    
    return success_rate >= 80  # –ú–∏–Ω–∏–º—É–º 80% —á–∏—Å—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤

def main():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        response = requests.get(f"{BASE_URL}/health")
        if response.status_code != 200:
            print("‚ùå HTTP-MCP —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
            return
    except:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ HTTP-MCP —Å–µ—Ä–≤–µ—Ä—É –Ω–∞ –ø–æ—Ä—Ç—É 8200")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        test_long_response,
        test_json_error_handling,
        test_path_validation,
        test_model_availability,
        test_response_cleaning
    ]
    
    passed = 0
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{len(tests)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(tests):
        print("‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è")

if __name__ == "__main__":
    main()
