#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP-MCP —Å–µ—Ä–≤–µ—Ä–∞
"""

import requests
import json
import time

MCP_SERVER_URL = "http://127.0.0.1:8200"

def test_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint...")
    try:
        response = requests.get(f"{MCP_SERVER_URL}/health")
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ MCP —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   –í–µ—Ä—Å–∏—è: {data.get('version')}")
            print(f"   RAG —Å–µ—Ä–≤–µ—Ä: {data.get('rag_server')}")
            print(f"   –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {len(data.get('tools_enabled', []))}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

def test_ask_rag():
    """–¢–µ—Å—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ask_rag"""
    print("\nüìù –¢–µ—Å—Ç ask_rag...")
    try:
        response = requests.post(
            f"{MCP_SERVER_URL}/tool/ask_rag",
            json={
                "query": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤ Vue?",
                "framework": "vue",
                "max_results": 3
            }
        )
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç")
            print(f"   –û—Ç–≤–µ—Ç: {data['answer'][:200]}...")
            print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(data.get('sources', []))}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"   {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def test_get_recent_changes():
    """–¢–µ—Å—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ get_recent_changes"""
    print("\nüìã –¢–µ—Å—Ç get_recent_changes...")
    try:
        response = requests.post(
            f"{MCP_SERVER_URL}/tool/get_recent_changes",
            json={"limit": 5}
        )
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(data.get('changes', []))}")
            if data.get('error'):
                print(f"   ‚ö†Ô∏è  {data['error']}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def test_run_tests():
    """–¢–µ—Å—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ run_tests (stub)"""
    print("\nüß™ –¢–µ—Å—Ç run_tests...")
    try:
        response = requests.post(
            f"{MCP_SERVER_URL}/tool/run_tests",
            json={}
        )
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
            print(f"   –°—Ç–∞—Ç—É—Å: {data.get('status')}")
            print(f"   –õ–æ–≥: {data.get('log', '')[:100]}...")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def test_apply_patch():
    """–¢–µ—Å—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ apply_patch"""
    print("\nüîß –¢–µ—Å—Ç apply_patch...")
    try:
        response = requests.post(
            f"{MCP_SERVER_URL}/tool/apply_patch",
            json={
                "diff": "--- a/test.js\n+++ b/test.js\n@@ -1,1 +1,1 @@\n-const a = 1;\n+const a = 2;",
                "files": ["test.js"]
            }
        )
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –ü–∞—Ç—á –ø—Ä–∏–º–µ–Ω–µ–Ω")
            print(f"   –°—Ç–∞—Ç—É—Å: {data.get('status')}")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message')}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def test_list_frameworks():
    """–¢–µ—Å—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ list_frameworks"""
    print("\nüì¶ –¢–µ—Å—Ç list_frameworks...")
    try:
        response = requests.post(
            f"{MCP_SERVER_URL}/tool/list_frameworks",
            json={}
        )
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(data.get('frameworks', []))}")
            for fw in data.get('frameworks', [])[:3]:
                print(f"   - {fw['name']} ({fw['key']})")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def test_stats_calls():
    """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–∑–æ–≤–æ–≤"""
    print("\nüìä –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–∑–æ–≤–æ–≤...")
    try:
        response = requests.get(f"{MCP_SERVER_URL}/stats/calls")
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            stats = data.get('stats', [])
            if stats:
                print("   –¢–æ–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
                for stat in stats[:3]:
                    print(f"   - {stat['tool_name']}: {stat['call_count']} –≤—ã–∑–æ–≤–æ–≤")
            else:
                print("   –ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def test_postcss_scenario():
    """–ú–∏–Ω–∏-—Å—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–æ–≤–µ—Ä–∫–∏ PostCSS bug"""
    print("\nüéØ –°—Ü–µ–Ω–∞—Ä–∏–π PostCSS bug...")
    
    # 1. –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
    print("1Ô∏è‚É£ –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –æ—à–∏–±–∫—É 'module is not defined'...")
    try:
        response = requests.post(
            f"{MCP_SERVER_URL}/tool/ask_rag",
            json={
                "query": "–ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É 'module is not defined' –≤ postcss.config.js?",
                "max_results": 3
            }
        )
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏")
            print(f"   {data['answer'][:150]}...")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    # 2. –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á
    print("\n2Ô∏è‚É£ –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á —Å export default...")
    try:
        response = requests.post(
            f"{MCP_SERVER_URL}/tool/apply_patch",
            json={
                "diff": """--- a/postcss.config.js
+++ b/postcss.config.js
@@ -1,5 +1,5 @@
-module.exports = {
+export default {
   plugins: {
     tailwindcss: {},
     autoprefixer: {},
   },
 }""",
                "files": ["postcss.config.js"]
            }
        )
        if response.status_code == 200:
            print("‚úÖ –ü–∞—Ç—á –ø—Ä–∏–º–µ–Ω–µ–Ω")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    # 3. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    print("\n3Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã...")
    try:
        response = requests.post(
            f"{MCP_SERVER_URL}/tool/run_tests",
            json={}
        )
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –¢–µ—Å—Ç—ã: {data.get('status')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
    print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã...")
    try:
        response = requests.post(
            f"{MCP_SERVER_URL}/tool/get_recent_changes",
            json={"limit": 3}
        )
        if response.status_code == 200:
            data = response.json()
            changes = data.get('changes', [])
            if changes:
                print("‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:")
                for change in changes:
                    print(f"   - {change.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            else:
                print("‚ö†Ô∏è  –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    print("\n‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π PostCSS bug –∑–∞–≤–µ—Ä—à–µ–Ω!")
    return True

def main():
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP-MCP —Å–µ—Ä–≤–µ—Ä–∞\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    if not test_health():
        print("\n‚ùå MCP —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
        print("1. RAG —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
        print("2. HTTP-MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:")
        print("   cd mcp-server && npm install && npm run start:http")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        test_ask_rag,
        test_get_recent_changes,
        test_run_tests,
        test_apply_patch,
        test_list_frameworks,
        test_stats_calls,
        test_postcss_scenario
    ]
    
    passed = 0
    for test in tests:
        if test():
            passed += 1
        time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{len(tests)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(tests):
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")

if __name__ == "__main__":
    main()
