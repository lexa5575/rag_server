#!/usr/bin/env node
import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import {
  CallToolRequestSchema,
  ListResourcesRequestSchema,
  ListToolsRequestSchema,
  ReadResourceRequestSchema,
} from '@modelcontextprotocol/sdk/types.js';
import axios from 'axios';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è RAG —Å–µ—Ä–≤–µ—Ä–∞
const RAG_SERVER_URL = 'http://localhost:8000';

// –°–æ–∑–¥–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä
const server = new Server(
  {
    name: 'rag-assistant',
    version: '1.0.0',
  },
  {
    capabilities: {
      resources: {},
      tools: {},
    },
  }
);

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
server.setRequestHandler(ListToolsRequestSchema, async () => {
  return {
    tools: [
      {
        name: 'ask_rag',
        description: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å RAG —Å–µ—Ä–≤–µ—Ä—É –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏',
        inputSchema: {
          type: 'object',
          properties: {
            question: {
              type: 'string',
              description: '–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            },
            framework: {
              type: 'string',
              description: '–§—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (vue, laravel, alpine, filament, inertia, tailwindcss)',
              enum: ['vue', 'laravel', 'alpine', 'filament', 'inertia', 'tailwindcss'],
            },
            model: {
              type: 'string',
              description: '–ú–æ–¥–µ–ª—å LLM –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (qwen –∏–ª–∏ deepseek)',
              enum: ['qwen', 'deepseek'],
            },
            max_results: {
              type: 'number',
              description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (1-20)',
              minimum: 1,
              maximum: 20,
              default: 5,
            },
          },
          required: ['question'],
        },
      },
      {
        name: 'list_frameworks',
        description: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏',
        inputSchema: {
          type: 'object',
          properties: {},
        },
      },
      {
        name: 'get_stats',
        description: '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö RAG',
        inputSchema: {
          type: 'object',
          properties: {},
        },
      },
      {
        name: 'list_models',
        description: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LLM –º–æ–¥–µ–ª–µ–π',
        inputSchema: {
          type: 'object',
          properties: {},
        },
      },
    ],
  };
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
server.setRequestHandler(CallToolRequestSchema, async (request) => {
  const { name, arguments: args } = request.params;

  try {
    switch (name) {
      case 'ask_rag': {
        const { question, framework, model, max_results = 5 } = args;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ RAG —Å–µ—Ä–≤–µ—Ä—É
        const response = await axios.post(`${RAG_SERVER_URL}/ask`, {
          question,
          framework,
          model,
          max_results,
        });

        const data = response.data;
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        let formattedAnswer = data.answer;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
        if (data.sources && data.sources.length > 0) {
          formattedAnswer += '\n\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏:';
          data.sources.forEach((source, index) => {
            formattedAnswer += `\n${index + 1}. [${source.framework}] ${source.source}`;
            if (source.heading) {
              formattedAnswer += ` - ${source.heading}`;
            }
          });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–µ
        if (data.framework_detected) {
          formattedAnswer += `\n\nüéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ñ—Ä–µ–π–º–≤–æ—Ä–∫: ${data.framework_detected}`;
        }
        
        return {
          content: [
            {
              type: 'text',
              text: formattedAnswer,
            },
          ],
        };
      }

      case 'list_frameworks': {
        const response = await axios.get(`${RAG_SERVER_URL}/frameworks`);
        const frameworks = response.data;
        
        let text = 'üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏:\n\n';
        
        for (const [key, info] of Object.entries(frameworks)) {
          text += `**${info.name}** (${key})\n`;
          text += `${info.description}\n`;
          text += `–¢–∏–ø: ${info.type}\n\n`;
        }
        
        return {
          content: [
            {
              type: 'text',
              text,
            },
          ],
        };
      }

      case 'get_stats': {
        const response = await axios.get(`${RAG_SERVER_URL}/stats`);
        const stats = response.data;
        
        let text = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RAG –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n\n';
        text += `üìö –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${stats.total_documents}\n`;
        text += `üíæ –†–∞–∑–º–µ—Ä –∫—ç—à–∞: ${stats.cache_size}\n\n`;
        
        if (stats.frameworks) {
          text += 'üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞–º:\n';
          for (const [framework, count] of Object.entries(stats.frameworks)) {
            text += `  ‚Ä¢ ${framework}: ${count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n`;
          }
        }
        
        return {
          content: [
            {
              type: 'text',
              text,
            },
          ],
        };
      }

      case 'list_models': {
        const response = await axios.get(`${RAG_SERVER_URL}/models`);
        const modelsData = response.data;
        
        let text = 'ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ LLM –º–æ–¥–µ–ª–∏:\n\n';
        
        for (const [key, info] of Object.entries(modelsData.models)) {
          text += `**${info.name}** (${key})\n`;
          text += `–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤: ${info.max_tokens}\n`;
          text += `–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${info.temperature}\n\n`;
        }
        
        text += `–ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: **${modelsData.default}**\n\n`;
        text += `–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏, —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä model –ø—Ä–∏ –≤—ã–∑–æ–≤–µ ask_rag:\n`;
        text += `–ù–∞–ø—Ä–∏–º–µ—Ä: "–ò—Å–ø–æ–ª—å–∑—É–π ask_rag —Å model="deepseek" —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç"`;
        
        return {
          content: [
            {
              type: 'text',
              text,
            },
          ],
        };
      }

      default:
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${name}`);
    }
  } catch (error) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    let errorMessage = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ${name}: `;
    
    if (error.response) {
      // –û—à–∏–±–∫–∞ –æ—Ç RAG —Å–µ—Ä–≤–µ—Ä–∞
      errorMessage += `${error.response.status} - ${error.response.statusText}`;
      if (error.response.data && error.response.data.detail) {
        errorMessage += `\n${error.response.data.detail}`;
      }
    } else if (error.request) {
      // –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      errorMessage += 'RAG —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000';
    } else {
      // –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
      errorMessage += error.message;
    }
    
    return {
      content: [
        {
          type: 'text',
          text: errorMessage,
        },
      ],
      isError: true,
    };
  }
});

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
server.setRequestHandler(ListResourcesRequestSchema, async () => {
  return {
    resources: [
      {
        uri: 'rag://frameworks',
        name: '–°–ø–∏—Å–æ–∫ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤',
        description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞—Ö –≤ RAG –±–∞–∑–µ',
        mimeType: 'application/json',
      },
      {
        uri: 'rag://stats',
        name: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
        description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ RAG –±–∞–∑–µ',
        mimeType: 'application/json',
      },
      {
        uri: 'rag://models',
        name: '–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π',
        description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LLM –º–æ–¥–µ–ª—è—Ö',
        mimeType: 'application/json',
      },
    ],
  };
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á—Ç–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
server.setRequestHandler(ReadResourceRequestSchema, async (request) => {
  const { uri } = request.params;

  try {
    switch (uri) {
      case 'rag://frameworks': {
        const response = await axios.get(`${RAG_SERVER_URL}/frameworks`);
        return {
          contents: [
            {
              uri,
              mimeType: 'application/json',
              text: JSON.stringify(response.data, null, 2),
            },
          ],
        };
      }

      case 'rag://stats': {
        const response = await axios.get(`${RAG_SERVER_URL}/stats`);
        return {
          contents: [
            {
              uri,
              mimeType: 'application/json',
              text: JSON.stringify(response.data, null, 2),
            },
          ],
        };
      }

      case 'rag://models': {
        const response = await axios.get(`${RAG_SERVER_URL}/models`);
        return {
          contents: [
            {
              uri,
              mimeType: 'application/json',
              text: JSON.stringify(response.data, null, 2),
            },
          ],
        };
      }

      default:
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Å—É—Ä—Å: ${uri}`);
    }
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–∞ ${uri}: ${error.message}`);
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function main() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  
  console.error('RAG MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
}

main().catch((error) => {
  console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
  process.exit(1);
});
