#!/usr/bin/env node
import axios from 'axios';

const RAG_SERVER_URL = 'http://localhost:8000';

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è RAG Assistant\n');

async function testRAGServer() {
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ RAG —Å–µ—Ä–≤–µ—Ä–∞
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ RAG —Å–µ—Ä–≤–µ—Ä–∞...');
    const rootResponse = await axios.get(RAG_SERVER_URL);
    console.log('‚úÖ RAG —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log(`   –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: ${rootResponse.data.total_docs}`);
    console.log('');
    
    // –¢–µ—Å—Ç 1.5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
    console.log('1Ô∏è‚É£.5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π...');
    const modelsResponse = await axios.get(`${RAG_SERVER_URL}/models`);
    console.log('‚úÖ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω:');
    console.log(`   –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: ${Object.keys(modelsResponse.data.models).length}`);
    console.log(`   –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${modelsResponse.data.default}`);
    Object.entries(modelsResponse.data.models).forEach(([key, info]) => {
      console.log(`   - ${info.name} (${key})`);
    });
    console.log('');

    // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤
    console.log('2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤...');
    const frameworksResponse = await axios.get(`${RAG_SERVER_URL}/frameworks`);
    const frameworks = Object.keys(frameworksResponse.data);
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤: ${frameworks.length}`);
    frameworks.forEach(fw => console.log(`   - ${fw}`));
    console.log('');

    // –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    const statsResponse = await axios.get(`${RAG_SERVER_URL}/stats`);
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:');
    console.log(`   –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${statsResponse.data.total_documents}`);
    console.log(`   –†–∞–∑–º–µ—Ä –∫—ç—à–∞: ${statsResponse.data.cache_size}`);
    if (statsResponse.data.frameworks) {
      console.log('   –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:');
      Object.entries(statsResponse.data.frameworks).forEach(([fw, count]) => {
        console.log(`     ${fw}: ${count}`);
      });
    }
    console.log('');

    // –¢–µ—Å—Ç 4: –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –º–æ–¥–µ–ª—å—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    console.log('4Ô∏è‚É£ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ RAG —Å –º–æ–¥–µ–ª—å—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...');
    console.log('   –í–æ–ø—Ä–æ—Å: "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç?"');
    
    const startTime = Date.now();
    const askResponse = await axios.post(`${RAG_SERVER_URL}/ask`, {
      question: '–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç?',
      max_results: 3
    });
    const responseTime = (Date.now() - startTime) / 1000;
    
    console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:');
    console.log(`   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${responseTime.toFixed(2)}—Å`);
    console.log(`   –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ñ—Ä–µ–π–º–≤–æ—Ä–∫: ${askResponse.data.framework_detected}`);
    console.log(`   –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${askResponse.data.sources.length}`);
    console.log(`   –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞:`);
    console.log(`   "${askResponse.data.answer.substring(0, 200)}..."`);
    console.log('');
    
    // –¢–µ—Å—Ç 5: –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏
    console.log('5Ô∏è‚É£ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ RAG —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏...');
    console.log('   –í–æ–ø—Ä–æ—Å: "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç?" —Å –º–æ–¥–µ–ª—å—é deepseek');
    
    try {
      const startTimeDeepseek = Date.now();
      const askResponseDeepseek = await axios.post(`${RAG_SERVER_URL}/ask`, {
        question: '–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç?',
        max_results: 3,
        model: 'deepseek'
      });
      const responseTimeDeepseek = (Date.now() - startTimeDeepseek) / 1000;
      
      console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç DeepSeek –ø–æ–ª—É—á–µ–Ω:');
      console.log(`   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${responseTimeDeepseek.toFixed(2)}—Å`);
      console.log(`   –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ñ—Ä–µ–π–º–≤–æ—Ä–∫: ${askResponseDeepseek.data.framework_detected}`);
      console.log(`   –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${askResponseDeepseek.data.sources.length}`);
      console.log(`   –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞:`);
      console.log(`   "${askResponseDeepseek.data.answer.substring(0, 200)}..."`);
    } catch (error) {
      console.log('‚ö†Ô∏è –¢–µ—Å—Ç —Å –º–æ–¥–µ–ª—å—é DeepSeek –ø—Ä–æ–ø—É—â–µ–Ω:');
      console.log(`   ${error.message}`);
      if (error.response && error.response.data && error.response.data.detail) {
        console.log(`   ${error.response.data.detail}`);
      }
    }
    console.log('');

    console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìù –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å MCP —Å–µ—Ä–≤–µ—Ä –≤ Cline:');
    console.log('   –ü—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É: ' + process.cwd() + '/index.js');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:');
    if (error.code === 'ECONNREFUSED') {
      console.error('   RAG —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000');
      console.error('   –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π:');
      console.error('   cd /Users/aleksejcuprynin/PycharmProjects/chanki');
      console.error('   source venv/bin/activate');
      console.error('   python rag_server.py');
    } else if (error.response) {
      console.error(`   HTTP ${error.response.status}: ${error.response.statusText}`);
      if (error.response.data && error.response.data.detail) {
        console.error(`   ${error.response.data.detail}`);
      }
    } else {
      console.error(`   ${error.message}`);
    }
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testRAGServer();
