#!/usr/bin/env node

/**
 * ü§ñ STDIO MCP Server –¥–ª—è Claude Code CLI
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å RAG —Å–∏—Å—Ç–µ–º–æ–π
 * –í—Å–µ HTTP –∑–∞–ø—Ä–æ—Å—ã –∏–¥—É—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É RAG —Å–µ—Ä–≤–µ—Ä—É –Ω–∞ –ø–æ—Ä—Ç—É 8000
 */

import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
} from "@modelcontextprotocol/sdk/types.js";
import axios from 'axios';
import fs from 'fs/promises';
import path from 'path';
import yaml from 'js-yaml';

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const configPath = path.join(path.dirname(new URL(import.meta.url).pathname), '..', 'config.yaml');
const configContent = await fs.readFile(configPath, 'utf8');
const config = yaml.load(configContent);

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
function getCurrentProjectName() {
  const cwd = process.cwd();
  const projectName = path.basename(cwd);
  return projectName.replace(/[^\w\-_.]/g, '_') || 'default';
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const RAG_SERVER_URL = process.env.RAG_SERVER_URL || 'http://localhost:8000';
const CHUNK_LIMIT_TOKENS = config.mcp?.chunk_limit_tokens || 4000;
const KEY_MOMENTS_LIMIT = config.mcp?.key_moments_limit || 10;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
const server = new Server(
  {
    name: "rag-server",
    version: "1.0.0",
  },
  {
    capabilities: {
      tools: {},
    },
  }
);

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ RAG (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ –∏–∑ HTTP —Å–µ—Ä–≤–µ—Ä–∞)
function cleanRAGResponse(response) {
  if (!response || typeof response !== 'string') {
    return response;
  }
  
  // –£–¥–∞–ª—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –ø—Ä–æ–º–ø—Ç–∞
  let cleanedResponse = response;
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –æ—Ç–≤–µ—Ç–∞
  const answerMarkers = [
    '[Answer]',
    '[–û—Ç–≤–µ—Ç]',
    'Answer:',
    '–û—Ç–≤–µ—Ç:',
    '[Response]',
    'Response:'
  ];
  
  for (const marker of answerMarkers) {
    while (cleanedResponse.includes(marker)) {
      cleanedResponse = cleanedResponse.replace(marker, '');
    }
  }
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—Ä–∫–µ—Ä –æ—Ç–≤–µ—Ç–∞, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç
  const firstAnswerIndex = response.indexOf('[Answer]');
  if (firstAnswerIndex !== -1) {
    const secondAnswerIndex = response.indexOf('[Answer]', firstAnswerIndex + 1);
    if (secondAnswerIndex !== -1) {
      cleanedResponse = response.substring(firstAnswerIndex + '[Answer]'.length, secondAnswerIndex).trim();
    } else {
      cleanedResponse = response.substring(firstAnswerIndex + '[Answer]'.length).trim();
    }
  }
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  const contextMarkers = [
    /\[.*?Documentation Context\][\s\S]*?(?=\[Answer\]|\[–û—Ç–≤–µ—Ç\]|Answer:|–û—Ç–≤–µ—Ç:|$)/gi,
    /\[User Question\][\s\S]*?(?=\[Answer\]|\[–û—Ç–≤–µ—Ç\]|Answer:|–û—Ç–≤–µ—Ç:|$)/gi,
    /\[Additional Context\][\s\S]*?(?=\[Answer\]|\[–û—Ç–≤–µ—Ç\]|Answer:|–û—Ç–≤–µ—Ç:|$)/gi,
    /\[Instructions\][\s\S]*?(?=\[Answer\]|\[–û—Ç–≤–µ—Ç\]|Answer:|–û—Ç–≤–µ—Ç:|$)/gi,
    /\[.*?Context\][\s\S]*?(?=\[Answer\]|\[–û—Ç–≤–µ—Ç\]|Answer:|–û—Ç–≤–µ—Ç:|$)/gi
  ];
  
  for (const pattern of contextMarkers) {
    cleanedResponse = cleanedResponse.replace(pattern, '');
  }
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫
  cleanedResponse = cleanedResponse.replace(/```+\s*$/g, '').trim();
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Ç–∏–ø–∞ "Human:", "Assistant:", "User:"
  cleanedResponse = cleanedResponse.replace(/^(Human|Assistant|User|AI):\s*/gm, '');
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
  cleanedResponse = cleanedResponse.replace(/\n{3,}/g, '\n\n');
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
  cleanedResponse = cleanedResponse.trim();
  
  if (!cleanedResponse) {
    cleanedResponse = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.";
  }
  
  return cleanedResponse;
}

// ü§ñ –ê–≤—Ç–æ–¥–µ—Ç–µ–∫—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ (–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ session_manager.py)
const KEY_MOMENT_TYPES = {
  ERROR_SOLVED: "error_solved",
  FEATURE_COMPLETED: "feature_completed", 
  CONFIG_CHANGED: "config_changed",
  BREAKTHROUGH: "breakthrough",
  FILE_CREATED: "file_created",
  DEPLOYMENT: "deployment",
  IMPORTANT_DECISION: "important_decision",
  REFACTORING: "refactoring"
};

const MOMENT_IMPORTANCE = {
  [KEY_MOMENT_TYPES.BREAKTHROUGH]: 9,
  [KEY_MOMENT_TYPES.ERROR_SOLVED]: 8,
  [KEY_MOMENT_TYPES.DEPLOYMENT]: 8,
  [KEY_MOMENT_TYPES.FEATURE_COMPLETED]: 7,
  [KEY_MOMENT_TYPES.IMPORTANT_DECISION]: 7,
  [KEY_MOMENT_TYPES.CONFIG_CHANGED]: 6,
  [KEY_MOMENT_TYPES.REFACTORING]: 6,
  [KEY_MOMENT_TYPES.FILE_CREATED]: 5,
};

function autoDetectKeyMoments(toolName, args, content = "", files = []) {
  const moments = [];
  const contentLower = content.toLowerCase();
  const toolNameLower = toolName.toLowerCase();
  
  // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ—à–∏–±–æ–∫ (—Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞)
  const errorKeywords = [
    // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
    "error", "fix", "solved", "resolved", "bug", "issue", "problem",
    // –†—É—Å—Å–∫–∏–µ
    "–æ—à–∏–±–∫–∞", "–∏—Å–ø—Ä–∞–≤–ª–µ–Ω", "—Ä–µ—à–µ–Ω", "—Ä–µ—à–µ–Ω–∞", "–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞", "–ø–æ—á–∏–Ω–µ–Ω", "–ø–æ—á–∏–Ω–µ–Ω–∞",
    "–±–∞–≥", "–ø—Ä–æ–±–ª–µ–º–∞", "—É—Å—Ç—Ä–∞–Ω–µ–Ω", "—É—Å—Ç—Ä–∞–Ω–µ–Ω–∞", "—Ñ–∏–∫—Å", "–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
  ];
  
  if (errorKeywords.some(word => contentLower.includes(word))) {
    moments.push({
      type: KEY_MOMENT_TYPES.ERROR_SOLVED,
      title: "–†–µ—à–µ–Ω–∏–µ –æ—à–∏–±–∫–∏",
      summary: `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ ${toolName}: ${content.substring(0, 200)}...`,
      importance: MOMENT_IMPORTANCE[KEY_MOMENT_TYPES.ERROR_SOLVED],
      files: files
    });
  }
  
  // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
  const creationActions = ["create", "write", "add", "—Å–æ–∑–¥–∞—Ç—å", "–Ω–∞–ø–∏—Å–∞—Ç—å", "–¥–æ–±–∞–≤–∏—Ç—å"];
  if ((creationActions.some(action => toolNameLower.includes(action) || contentLower.includes(action)) && files.length > 0) ||
      (toolName === "open_file" && args.path && contentLower.includes("—Å–æ–∑–¥–∞–Ω"))) {
    moments.push({
      type: KEY_MOMENT_TYPES.FILE_CREATED,
      title: `–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ${files[0] || args.path || ""}`,
      summary: `–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª ${files[0] || args.path || ""} —á–µ—Ä–µ–∑ ${toolName}: ${content.substring(0, 200)}...`,
      importance: MOMENT_IMPORTANCE[KEY_MOMENT_TYPES.FILE_CREATED],
      files: files.length > 0 ? files : (args.path ? [args.path] : [])
    });
  }
  
  // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π (—Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞)
  const completionKeywords = [
    // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
    "completed", "finished", "done", "implemented", "ready", "success",
    // –†—É—Å—Å–∫–∏–µ
    "–∑–∞–≤–µ—Ä—à–µ–Ω", "–∑–∞–≤–µ—Ä—à–µ–Ω–∞", "–≥–æ—Ç–æ–≤", "–≥–æ—Ç–æ–≤–∞", "–≤—ã–ø–æ–ª–Ω–µ–Ω", "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
    "—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω", "—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", "–∑–∞–∫–æ–Ω—á–µ–Ω", "–∑–∞–∫–æ–Ω—á–µ–Ω–∞", "—Å–¥–µ–ª–∞–Ω", "—Å–¥–µ–ª–∞–Ω–∞"
  ];
  
  if (completionKeywords.some(word => contentLower.includes(word))) {
    moments.push({
      type: KEY_MOMENT_TYPES.FEATURE_COMPLETED,
      title: "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏",
      summary: `–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è —á–µ—Ä–µ–∑ ${toolName}: ${content.substring(0, 200)}...`,
      importance: MOMENT_IMPORTANCE[KEY_MOMENT_TYPES.FEATURE_COMPLETED],
      files: files
    });
  }
  
  // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞)
  const configKeywords = [
    // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
    "config", "settings", "yaml", "json", "configuration",
    // –†—É—Å—Å–∫–∏–µ
    "–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞", "–∫–æ–Ω—Ñ–∏–≥", "–ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
  ];
  
  if ((configKeywords.some(word => contentLower.includes(word)) && files.length > 0) ||
      (files.some(file => file.includes('.yaml') || file.includes('.json') || file.includes('.config')))) {
    moments.push({
      type: KEY_MOMENT_TYPES.CONFIG_CHANGED,
      title: "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
      summary: `–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ ${toolName}: ${content.substring(0, 200)}...`,
      importance: MOMENT_IMPORTANCE[KEY_MOMENT_TYPES.CONFIG_CHANGED],
      files: files
    });
  }
  
  // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ (—Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞)
  const refactoringKeywords = [
    // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
    "refactor", "refactored", "restructure", "optimize", "optimized",
    // –†—É—Å—Å–∫–∏–µ
    "—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥", "—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–ª", "—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–ª–∞", "–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω", "–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞",
    "–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω", "–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–∞", "—Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è", "—É–ª—É—á—à–µ–Ω", "—É–ª—É—á—à–µ–Ω–∞"
  ];
  
  if (refactoringKeywords.some(word => contentLower.includes(word))) {
    moments.push({
      type: KEY_MOMENT_TYPES.REFACTORING,
      title: "–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞",
      summary: `–ü—Ä–æ–≤–µ–¥–µ–Ω —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ ${toolName}: ${content.substring(0, 200)}...`,
      importance: MOMENT_IMPORTANCE[KEY_MOMENT_TYPES.REFACTORING],
      files: files
    });
  }
  
  // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π (—Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞)
  const decisionKeywords = [
    // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
    "decided", "decision", "choice", "selected", "approach",
    // –†—É—Å—Å–∫–∏–µ
    "—Ä–µ—à–∏–ª", "—Ä–µ—à–∏–ª–∞", "—Ä–µ—à–µ–Ω–∏–µ", "–≤—ã–±–æ—Ä", "–ø–æ–¥—Ö–æ–¥", "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è",
    "–ø—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ", "–≤—ã–±—Ä–∞–Ω", "–≤—ã–±—Ä–∞–Ω–∞"
  ];
  
  if (decisionKeywords.some(word => contentLower.includes(word))) {
    moments.push({
      type: KEY_MOMENT_TYPES.IMPORTANT_DECISION,
      title: "–í–∞–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
      summary: `–ü—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${toolName}: ${content.substring(0, 200)}...`,
      importance: MOMENT_IMPORTANCE[KEY_MOMENT_TYPES.IMPORTANT_DECISION],
      files: files
    });
  }
  
  return moments;
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
async function autoSaveKeyMoments(toolName, args, content = "", files = []) {
  try {
    const detectedMoments = autoDetectKeyMoments(toolName, args, content, files);
    
    if (detectedMoments.length === 0) {
      return; // –ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
    let sessionId;
    try {
      const sessionResponse = await axios.get(`${RAG_SERVER_URL}/sessions/latest?project_name=${getCurrentProjectName()}`);
      sessionId = sessionResponse.data.session_id;
    } catch {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const createResponse = await axios.post(`${RAG_SERVER_URL}/sessions/create?project_name=${getCurrentProjectName()}`, {
        description: "Claude Code CLI –∞–≤—Ç–æ—Å–µ—Å—Å–∏—è"
      });
      sessionId = createResponse.data.session_id;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç
    for (const moment of detectedMoments) {
      try {
        await axios.post(`${RAG_SERVER_URL}/sessions/${sessionId}/key-moment`, {
          moment_type: moment.type,
          title: moment.title,
          summary: moment.summary,
          files_involved: moment.files || [],
          importance: moment.importance
        });
        
        console.error(`üéØ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç: ${moment.title} (${moment.type})`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–º–µ–Ω—Ç–∞ ${moment.title}:`, error.message);
      }
    }
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–¥–µ—Ç–µ–∫—Ü–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤:`, error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–∑–æ–≤–æ–≤ –≤ RAG —Å–∏—Å—Ç–µ–º—É
async function logToolCall(toolName, args, result, success) {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π endpoint –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏—é
    await axios.post(`${RAG_SERVER_URL}/session/message`, {
      project_name: "${getCurrentProjectName()}",
      role: "assistant",
      content: `MCP Tool: ${toolName} - ${success ? 'Success' : 'Failed'}`,
      actions: [toolName],
      files: result?.files || []
    }).catch(() => {}); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  } catch (error) {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    console.error(`üìù –õ–æ–≥ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ${toolName}: ${success ? 'Success' : 'Failed'}`);
  }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
server.setRequestHandler(ListToolsRequestSchema, async () => {
  return {
    tools: [
      {
        name: "ask_rag",
        description: "–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç RAG —Å–∏—Å—Ç–µ–º—ã –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ Laravel, Vue.js, Filament –∏ –¥—Ä. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Å–µ—Å—Å–∏—é.",
        inputSchema: {
          type: "object",
          properties: {
            query: {
              type: "string",
              description: "–í–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã",
            },
            framework: {
              type: "string",
              description: "–§—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞: laravel, vue, filament, alpine, inertia, tailwindcss",
              enum: ["laravel", "vue", "filament", "alpine", "inertia", "tailwindcss"],
            },
            max_results: {
              type: "number",
              description: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)",
              default: 5,
            },
          },
          required: ["query"],
        },
      },
      {
        name: "list_frameworks",
        description: "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤ –≤ RAG —Å–∏—Å—Ç–µ–º–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
        inputSchema: {
          type: "object",
          properties: {},
        },
      },
      {
        name: "get_stats",
        description: "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è RAG —Å–∏—Å—Ç–µ–º—ã",
        inputSchema: {
          type: "object",
          properties: {},
        },
      },
      {
        name: "get_recent_changes",
        description: "–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏",
        inputSchema: {
          type: "object",
          properties: {
            limit: {
              type: "number",
              description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)",
              default: 10,
            },
          },
        },
      },
      {
        name: "save_key_moment",
        description: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –≤–∞–∂–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–¥–∞)",
        inputSchema: {
          type: "object",
          properties: {
            title: {
              type: "string",
              description: "–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞",
            },
            summary: {
              type: "string", 
              description: "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ",
            },
            type: {
              type: "string",
              description: "–¢–∏–ø –º–æ–º–µ–Ω—Ç–∞",
              enum: ["error_solved", "feature_completed", "config_changed", "breakthrough", "file_created", "deployment", "important_decision", "refactoring"],
              default: "feature_completed"
            },
            files: {
              type: "array",
              items: { type: "string" },
              description: "–°–ø–∏—Å–æ–∫ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤",
              default: []
            },
            importance: {
              type: "number",
              description: "–í–∞–∂–Ω–æ—Å—Ç—å –æ—Ç 1 –¥–æ 10",
              minimum: 1,
              maximum: 10,
              default: 5
            }
          },
          required: ["title", "summary"],
        },
      },
      {
        name: "open_file",
        description: "–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–Ω–∏–º–∫–∞",
        inputSchema: {
          type: "object",
          properties: {
            path: {
              type: "string",
              description: "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —á—Ç–µ–Ω–∏—è",
            },
          },
          required: ["path"],
        },
      },
      {
        name: "search_files",
        description: "–ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ",
        inputSchema: {
          type: "object",
          properties: {
            query: {
              type: "string",
              description: "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–æ–≤",
            },
            language: {
              type: "string",
              description: "–§–∏–ª—å—Ç—Ä –ø–æ —è–∑—ã–∫—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (python, javascript, etc.)",
              default: "",
            },
            limit: {
              type: "number",
              description: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
              default: 10,
            },
          },
          required: ["query"],
        },
      },
      {
        name: "get_file_history",
        description: "–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞",
        inputSchema: {
          type: "object",
          properties: {
            file_path: {
              type: "string",
              description: "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏",
            },
          },
          required: ["file_path"],
        },
      },
      {
        name: "init_memory_bank",
        description: "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Memory Bank —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞",
        inputSchema: {
          type: "object",
          properties: {
            project_root: {
              type: "string",
              description: "–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è)",
              default: "",
            },
          },
        },
      },
      {
        name: "get_memory_context",
        description: "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Memory Bank",
        inputSchema: {
          type: "object",
          properties: {
            context_type: {
              type: "string",
              description: "–¢–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: project, active, progress, decisions, patterns",
              enum: ["project", "active", "progress", "decisions", "patterns"],
              default: "active",
            },
          },
        },
      },
      {
        name: "update_active_context",
        description: "–û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏",
        inputSchema: {
          type: "object",
          properties: {
            session_state: {
              type: "string",
              description: "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏",
            },
            tasks: {
              type: "array",
              items: { type: "string" },
              description: "–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á",
              default: [],
            },
            decisions: {
              type: "array",
              items: { type: "string" },
              description: "–°–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ä–µ—à–µ–Ω–∏–π",
              default: [],
            },
          },
          required: ["session_state"],
        },
      },
      {
        name: "log_decision",
        description: "–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤ Memory Bank",
        inputSchema: {
          type: "object",
          properties: {
            title: {
              type: "string",
              description: "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è",
            },
            context: {
              type: "string",
              description: "–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø—Ä–∏—á–∏–Ω—ã —Ä–µ—à–µ–Ω–∏—è",
            },
            decision: {
              type: "string",
              description: "–ü—Ä–∏–Ω—è—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
            },
            consequences: {
              type: "string",
              description: "–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∏ –≤–ª–∏—è–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è",
            },
          },
          required: ["title", "context", "decision"],
        },
      },
      {
        name: "search_memory_bank",
        description: "–ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É Memory Bank —Ñ–∞–π–ª–æ–≤",
        inputSchema: {
          type: "object",
          properties: {
            query: {
              type: "string",
              description: "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
            },
          },
          required: ["query"],
        },
      },
      {
        name: "search_symbols",
        description: "–ü–æ–∏—Å–∫ –ø–æ —Å–∏–º–≤–æ–ª–∞–º –∫–æ–¥–∞ (—Ñ—É–Ω–∫—Ü–∏–∏, –∫–ª–∞—Å—Å—ã, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ) —Å AST-–∞–Ω–∞–ª–∏–∑–æ–º",
        inputSchema: {
          type: "object",
          properties: {
            query: {
              type: "string",
              description: "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ —Å–∏–º–≤–æ–ª–∞",
            },
            symbol_type: {
              type: "string",
              description: "–¢–∏–ø —Å–∏–º–≤–æ–ª–∞: function, class, variable, import",
              default: "",
            },
            language: {
              type: "string",
              description: "–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: python, javascript, typescript",
              default: "",
            },
            limit: {
              type: "number",
              description: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
              default: 20,
            },
          },
          required: ["query"],
        },
      },
    ],
  };
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
server.setRequestHandler(CallToolRequestSchema, async (request) => {
  const { name, arguments: args } = request.params;

  try {
    let result;
    
    switch (name) {
      case "ask_rag": {
        const response = await axios.post(`${RAG_SERVER_URL}/ask`, {
          question: args.query,
          framework: args.framework,
          max_results: args.max_results || 5,
        });

        const cleanedAnswer = cleanRAGResponse(response.data.answer);
        
        result = {
          answer: cleanedAnswer,
          sources: response.data.sources?.map(s => ({
            path: s.source,
            framework: s.framework,
            heading: s.heading || ''
          })) || [],
          session_id: response.data.session_id,
          framework_detected: response.data.framework_detected,
          total_docs: response.data.total_docs,
          response_time: response.data.response_time
        };
        
        await logToolCall(name, args, result, true);
        
        // ü§ñ –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ RAG –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
        await autoSaveKeyMoments(name, args, `${args.query} ${cleanedAnswer}`, []);
        
        return {
          content: [
            {
              type: "text",
              text: `üìö **RAG –û—Ç–≤–µ—Ç:**\n\n${cleanedAnswer}\n\nüéØ **–§—Ä–µ–π–º–≤–æ—Ä–∫:** ${response.data.framework_detected}\nüìä **–ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:** ${response.data.total_docs}\n‚ö° **–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** ${Math.round(response.data.response_time)}–º—Å\n\nüîó **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:**\n${response.data.sources?.map(s => `- **${s.framework}**: ${s.source}${s.heading ? ` (${s.heading})` : ''}`).join('\n') || '–ù–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤'}`,
            },
          ],
        };
      }

      case "list_frameworks": {
        const response = await axios.get(`${RAG_SERVER_URL}/frameworks`);
        const statsResponse = await axios.get(`${RAG_SERVER_URL}/stats`);
        
        const frameworks = Object.entries(response.data).map(([key, info]) => {
          const docCount = statsResponse.data.frameworks[key.toUpperCase()] || 0;
          return `- **${key}**: ${info.name} - ${info.description} (${docCount} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)`;
        }).join('\n');
        
        result = { frameworks: response.data, stats: statsResponse.data.frameworks };
        await logToolCall(name, args, result, true);
        
        return {
          content: [
            {
              type: "text",
              text: `üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏:**\n\n${frameworks}\n\nüìä **–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:** ${statsResponse.data.total_documents}`,
            },
          ],
        };
      }

      case "get_stats": {
        const response = await axios.get(`${RAG_SERVER_URL}/stats`);
        const stats = response.data;
        
        const frameworkStats = Object.entries(stats.frameworks || {})
          .map(([key, count]) => `- **${key}**: ${count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`)
          .join('\n');
        
        result = stats;
        await logToolCall(name, args, result, true);
        
        return {
          content: [
            {
              type: "text",
              text: `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RAG —Å–∏—Å—Ç–µ–º—ã:**\n\n**–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:** ${stats.total_documents || 0}\n\n**–ü–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞–º:**\n${frameworkStats}\n\n**–†–∞–∑–º–µ—Ä –∫—ç—à–∞:** ${stats.cache_size || 0}`,
            },
          ],
        };
      }

      case "get_recent_changes": {
        try {
          // –ü–†–û–°–¢–û–ô –¢–ï–°–¢ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
          const testMessage = `üîÑ **–¢–ï–°–¢: –§—É–Ω–∫—Ü–∏—è get_recent_changes –≤—ã–∑–≤–∞–Ω–∞!**\n\n–í—Ä–µ–º—è: ${new Date().toLocaleString()}\nURL: ${RAG_SERVER_URL}\n–ü—Ä–æ–µ–∫—Ç: ${getCurrentProjectName()}`;
          
          const response = await axios.get(`${RAG_SERVER_URL}/sessions/latest?project_name=${getCurrentProjectName()}`);
          const data = response.data;
          
          // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ –∫–ª—é—á–µ–≤—ã–º –º–æ–º–µ–Ω—Ç–∞–º
          let moments = null;
          let source = "";
          
          if (data && data.context && data.context.key_moments && Array.isArray(data.context.key_moments)) {
            moments = data.context.key_moments;
            source = "data.context.key_moments";
          } else if (data && data.key_moments && Array.isArray(data.key_moments)) {
            moments = data.key_moments;
            source = "data.key_moments";
          }
          
          if (!moments || moments.length === 0) {
            return {
              content: [{
                type: "text",
                text: `${testMessage}\n\n‚ùå **–ü—Ä–æ–±–ª–µ–º–∞:** –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:**\n- –ü–æ–ª—è –≤ data: ${Object.keys(data || {}).join(', ')}\n- context —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${!!(data && data.context)}\n- –ü–æ–ª—è –≤ context: ${data && data.context ? Object.keys(data.context).join(', ') : '–Ω–µ—Ç'}`
              }]
            };
          }
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–º–µ–Ω—Ç–æ–≤
          const formatted = moments.slice(0, args.limit || 5).map((m, i) => 
            `${i+1}. **${m.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}** (${m.type || 'unknown'})\n   ${(m.summary || '').substring(0, 100)}...`
          ).join('\n\n');
          
          return {
            content: [{
              type: "text", 
              text: `${testMessage}\n\n‚úÖ **–£—Å–ø–µ—Ö!** –ù–∞–π–¥–µ–Ω–æ ${moments.length} –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤\n**–ò—Å—Ç–æ—á–Ω–∏–∫:** ${source}\n\n**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–æ–º–µ–Ω—Ç—ã:**\n\n${formatted}`
            }]
          };
          
        } catch (error) {
          return {
            content: [{
              type: "text",
              text: `üîÑ **–¢–ï–°–¢: –§—É–Ω–∫—Ü–∏—è get_recent_changes –≤—ã–∑–≤–∞–Ω–∞!**\n\n‚ùå **–û—à–∏–±–∫–∞:** ${error.message}\n\n**–î–µ—Ç–∞–ª–∏:**\n- URL: ${RAG_SERVER_URL}/sessions/latest?project_name=${getCurrentProjectName()}\n- –í—Ä–µ–º—è: ${new Date().toLocaleString()}`
            }]
          };
        }
      }

      case "save_key_moment": {
        try {
          // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
          let sessionId;
          try {
            const sessionResponse = await axios.get(`${RAG_SERVER_URL}/sessions/latest?project_name=${getCurrentProjectName()}`);
            sessionId = sessionResponse.data.session_id;
          } catch {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            const createResponse = await axios.post(`${RAG_SERVER_URL}/sessions/create?project_name=${getCurrentProjectName()}`, {
              description: "Claude Code CLI —Å–µ—Å—Å–∏—è"
            });
            sessionId = createResponse.data.session_id;
          }
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç
          const momentResponse = await axios.post(`${RAG_SERVER_URL}/sessions/${sessionId}/key-moment`, {
            moment_type: args.type || 'feature_completed',
            title: args.title,
            summary: args.summary,
            files_involved: args.files || [],
            importance: args.importance || 5
          });
          
          result = { saved: true, session_id: sessionId };
          await logToolCall(name, args, result, true);
          
          // ü§ñ –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
          await autoSaveKeyMoments(name, args, `${args.title} ${args.summary}`, args.files || []);
          
          return {
            content: [
              {
                type: "text",
                text: `‚úÖ **–ö–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω**\n\n**–ù–∞–∑–≤–∞–Ω–∏–µ:** ${args.title}\n**–¢–∏–ø:** ${args.type || 'feature_completed'}\n**–û–ø–∏—Å–∞–Ω–∏–µ:** ${args.summary}\n**–°–µ—Å—Å–∏—è:** ${sessionId}`,
              },
            ],
          };
        } catch (error) {
          return {
            content: [
              {
                type: "text",
                text: `‚ùå **–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞**\n\n${error.message}`,
              },
            ],
          };
        }
      }

      case "open_file": {
        const filePath = args.path;
        
        if (!filePath) {
          throw new Error('–ü–∞—Ä–∞–º–µ—Ç—Ä path –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Ç–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ –∏–∑ HTTP —Å–µ—Ä–≤–µ—Ä–∞)
        const normalizedPath = path.normalize(filePath);
        const absolutePath = path.isAbsolute(normalizedPath) ? normalizedPath : path.resolve(normalizedPath);
        
        // –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π
        const forbiddenPaths = [
          '/etc/',
          '/sys/', 
          '/proc/',
          '/root/',
          'C:\\Windows\\',
          'C:\\System'
        ];
        
        if (absolutePath.includes('.ssh') || 
            forbiddenPaths.some(forbidden => absolutePath.toLowerCase().includes(forbidden.toLowerCase())) ||
            (normalizedPath.includes('..') && (normalizedPath.includes('etc') || normalizedPath.includes('ssh')))) {
          throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ñ–∞–π–ª');
        }

        try {
          const content = await fs.readFile(filePath, 'utf8');
          
          // –ü–æ–ª—É—á–∞–µ–º/—Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–Ω–∏–º–∫–∞ —Ñ–∞–π–ª–∞
          let sessionId;
          try {
            const sessionResponse = await axios.get(`${RAG_SERVER_URL}/sessions/latest?project_name=${getCurrentProjectName()}`);
            sessionId = sessionResponse.data.session_id;
          } catch {
            const createResponse = await axios.post(`${RAG_SERVER_URL}/sessions/create?project_name=${getCurrentProjectName()}`, {
              description: "Claude Code CLI –∞–≤—Ç–æ—Å–µ—Å—Å–∏—è"
            });
            sessionId = createResponse.data.session_id;
          }
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–Ω–∏–º–æ–∫ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API
          try {
            const snapshotResponse = await axios.post(`${RAG_SERVER_URL}/file-snapshots/save`, {
              session_id: sessionId,
              file_path: filePath,
              content: content
            });
            
            console.error(`üì∏ –°–Ω–∏–º–æ–∫ —Ñ–∞–π–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${snapshotResponse.data.snapshot_id}`);
          } catch (snapshotError) {
            console.error(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–Ω–∏–º–æ–∫ —Ñ–∞–π–ª–∞: ${snapshotError.message}`);
          }
          
          result = { content, path: filePath };
          await logToolCall(name, args, result, true);
          
          // ü§ñ –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
          await autoSaveKeyMoments(name, args, content, [filePath]);
          
          return {
            content: [
              {
                type: "text",
                text: `üìÅ **–§–∞–π–ª:** ${filePath}\n\n\`\`\`\n${content}\n\`\`\``,
              },
            ],
          };
        } catch (error) {
          throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: ${error.message}`);
        }
      }

      case "search_files": {
        try {
          const response = await axios.get(`${RAG_SERVER_URL}/file-snapshots/search`, {
            params: {
              query: args.query,
              language: args.language || "",
              limit: args.limit || 10
            }
          });
          
          const results = response.data.results;
          const totalFound = response.data.total_found;
          
          let resultText = `üîç **–ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–π–ª–∞–º:** "${args.query}"\n\n`;
          resultText += `üìä **–ù–∞–π–¥–µ–Ω–æ:** ${totalFound} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n`;
          
          if (args.language) {
            resultText += `üè∑Ô∏è **–§–∏–ª—å—Ç—Ä –ø–æ —è–∑—ã–∫—É:** ${args.language}\n\n`;
          }
          
          if (results.length === 0) {
            resultText += "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ";
          } else {
            resultText += "üìÇ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n\n";
            results.forEach((result, index) => {
              resultText += `${index + 1}. **${result.file_path}** (${result.language})\n`;
              resultText += `   ${result.content_preview.substring(0, 100)}...\n\n`;
            });
          }
          
          result = { query: args.query, results, total_found: totalFound };
          await logToolCall(name, args, result, true);
          
          return {
            content: [
              {
                type: "text",
                text: resultText,
              },
            ],
          };
        } catch (error) {
          throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ–∞–π–ª–∞–º: ${error.message}`);
        }
      }

      case "get_file_history": {
        try {
          // –ö–æ–¥–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è URL
          const encodedPath = encodeURIComponent(args.file_path);
          const response = await axios.get(`${RAG_SERVER_URL}/file-snapshots/history/${encodedPath}`);
          
          const history = response.data.history;
          const totalVersions = response.data.total_versions;
          
          let resultText = `üìö **–ò—Å—Ç–æ—Ä–∏—è —Ñ–∞–π–ª–∞:** ${args.file_path}\n\n`;
          resultText += `üìä **–í—Å–µ–≥–æ –≤–µ—Ä—Å–∏–π:** ${totalVersions}\n\n`;
          
          if (history.length === 0) {
            resultText += "‚ùå –ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞";
          } else {
            resultText += "üóÇÔ∏è **–í–µ—Ä—Å–∏–∏:**\n\n";
            history.forEach((version, index) => {
              const date = new Date(version.timestamp * 1000).toLocaleString();
              resultText += `${index + 1}. **${version.content_hash.substring(0, 8)}** (${version.size_bytes} –±–∞–π—Ç) - ${date}\n`;
            });
          }
          
          result = { file_path: args.file_path, history, total_versions: totalVersions };
          await logToolCall(name, args, result, true);
          
          return {
            content: [
              {
                type: "text",
                text: resultText,
              },
            ],
          };
        } catch (error) {
          throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ñ–∞–π–ª–∞: ${error.message}`);
        }
      }

      case "init_memory_bank": {
        try {
          const projectRoot = args.project_root || process.cwd();
          
          const response = await axios.post(`${RAG_SERVER_URL}/memory-bank/init`, {
            project_root: projectRoot
          });
          
          result = { initialized: true, project_root: projectRoot };
          await logToolCall(name, args, result, true);
          
          return {
            content: [
              {
                type: "text",
                text: `üè¶ **Memory Bank –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω**\n\n**–ü—Ä–æ–µ–∫—Ç:** ${projectRoot}\n**–°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤:** ${response.data.files_created || 5}\n\nüìÇ **–°—Ç—Ä—É–∫—Ç—É—Ä–∞:**\n- project-context.md - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞\n- active-context.md - –ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏\n- progress.md - –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n- decisions.md - –õ–æ–≥ –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π\n- code-patterns.md - –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ–¥–∞`,
              },
            ],
          };
        } catch (error) {
          throw new Error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Memory Bank: ${error.message}`);
        }
      }

      case "get_memory_context": {
        try {
          const contextType = args.context_type || "active";
          
          const response = await axios.get(`${RAG_SERVER_URL}/memory-bank/context`, {
            params: {
              context_type: contextType,
              project_root: process.cwd()
            }
          });
          
          // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
          const contextData = response.data.context;
          const filesCount = response.data.files_count;
          
          let content = "";
          let filename = "";
          
          if (contextType === "project") {
            content = contextData["project-context"] || "–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω";
            filename = "project-context.md";
          } else if (contextType === "active") {
            content = contextData["active-context"] || "–ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω";  
            filename = "active-context.md";
          } else if (contextType === "progress") {
            content = contextData["progress"] || "–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω";
            filename = "progress.md";
          } else if (contextType === "decisions") {
            content = contextData["decisions"] || "–†–µ—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã";
            filename = "decisions.md";
          } else if (contextType === "patterns") {
            content = contextData["code-patterns"] || "–ü–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã";
            filename = "code-patterns.md";
          }
          
          result = { context_type: contextType, content, filename };
          await logToolCall(name, args, result, true);
          
          return {
            content: [
              {
                type: "text",
                text: `üè¶ **Memory Bank - ${contextType.toUpperCase()}**\n\nüìÅ **–§–∞–π–ª:** ${filename}\n\n---\n\n${content}`,
              },
            ],
          };
        } catch (error) {
          throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Memory Bank: ${error.message}`);
        }
      }

      case "update_active_context": {
        try {
          const response = await axios.post(`${RAG_SERVER_URL}/memory-bank/update-active-context`, {
            project_root: process.cwd(),
            session_state: args.session_state,
            tasks: args.tasks || [],
            decisions: args.decisions || []
          });
          
          result = { updated: true, session_state: args.session_state };
          await logToolCall(name, args, result, true);
          
          return {
            content: [
              {
                type: "text",
                text: `üîÑ **–ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω**\n\n**–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏:** ${args.session_state}\n**–ó–∞–¥–∞—á:** ${(args.tasks || []).length}\n**–†–µ—à–µ–Ω–∏–π:** ${(args.decisions || []).length}`,
              },
            ],
          };
        } catch (error) {
          throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ${error.message}`);
        }
      }

      case "log_decision": {
        try {
          const response = await axios.post(`${RAG_SERVER_URL}/memory-bank/add-decision`, {
            project_root: process.cwd(),
            title: args.title,
            context: args.context,
            decision: args.decision,
            consequences: args.consequences || ""
          });
          
          result = { logged: true, title: args.title };
          await logToolCall(name, args, result, true);
          
          return {
            content: [
              {
                type: "text",
                text: `üìù **–†–µ—à–µ–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ**\n\n**–ù–∞–∑–≤–∞–Ω–∏–µ:** ${args.title}\n**–ö–æ–Ω—Ç–µ–∫—Å—Ç:** ${args.context}\n**–†–µ—à–µ–Ω–∏–µ:** ${args.decision}\n${args.consequences ? `**–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è:** ${args.consequences}` : ''}`,
              },
            ],
          };
        } catch (error) {
          throw new Error(`–û—à–∏–±–∫–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ä–µ—à–µ–Ω–∏—è: ${error.message}`);
        }
      }

      case "search_memory_bank": {
        try {
          const response = await axios.get(`${RAG_SERVER_URL}/memory-bank/search`, {
            params: {
              query: args.query,
              project_root: process.cwd()
            }
          });
          
          const results = response.data.results;
          const totalFound = response.data.total_found;
          
          let resultText = `üîç **–ü–æ–∏—Å–∫ –≤ Memory Bank:** "${args.query}"\n\n`;
          resultText += `üìä **–ù–∞–π–¥–µ–Ω–æ:** ${totalFound} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n`;
          
          if (results.length === 0) {
            resultText += "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ";
          } else {
            resultText += "üìÇ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n\n";
            results.forEach((result, index) => {
              resultText += `${index + 1}. **${result.filename}**\n`;
              resultText += `   ${result.preview.substring(0, 150)}...\n\n`;
            });
          }
          
          result = { query: args.query, results, total_found: totalFound };
          await logToolCall(name, args, result, true);
          
          return {
            content: [
              {
                type: "text",
                text: resultText,
              },
            ],
          };
        } catch (error) {
          throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Memory Bank: ${error.message}`);
        }
      }

      case "search_symbols": {
        try {
          const response = await axios.get(`${RAG_SERVER_URL}/code-symbols/search`, {
            params: {
              query: args.query,
              symbol_type: args.symbol_type || "",
              language: args.language || "",
              limit: args.limit || 20
            }
          });
          
          const results = response.data.results;
          const totalFound = response.data.total_found;
          
          let resultText = `üîç **–ü–æ–∏—Å–∫ —Å–∏–º–≤–æ–ª–æ–≤:** "${args.query}"\n\n`;
          resultText += `üìä **–ù–∞–π–¥–µ–Ω–æ:** ${totalFound} —Å–∏–º–≤–æ–ª–æ–≤\n\n`;
          
          if (args.symbol_type) {
            resultText += `üè∑Ô∏è **–¢–∏–ø:** ${args.symbol_type}\n`;
          }
          if (args.language) {
            resultText += `üíª **–Ø–∑—ã–∫:** ${args.language}\n`;
          }
          if (args.symbol_type || args.language) {
            resultText += '\n';
          }
          
          if (results.length === 0) {
            resultText += "‚ùå –°–∏–º–≤–æ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã";
          } else {
            resultText += "üéØ **–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã:**\n\n";
            results.forEach((symbol, index) => {
              const typeEmoji = symbol.symbol_type === 'function' ? 'üîß' : 
                              symbol.symbol_type === 'class' ? 'üì¶' : 
                              symbol.symbol_type === 'variable' ? 'üìù' : 'üì•';
              
              resultText += `${index + 1}. ${typeEmoji} **${symbol.name}** (${symbol.symbol_type})\n`;
              resultText += `   üìÅ ${symbol.file_path}:${symbol.start_line}\n`;
              resultText += `   ‚ö° \`${symbol.signature.substring(0, 80)}${symbol.signature.length > 80 ? '...' : ''}\`\n`;
              
              if (symbol.docstring && symbol.docstring.trim()) {
                resultText += `   üìñ ${symbol.docstring.substring(0, 100)}${symbol.docstring.length > 100 ? '...' : ''}\n`;
              }
              
              resultText += '\n';
            });
          }
          
          result = { query: args.query, results, total_found: totalFound };
          await logToolCall(name, args, result, true);
          
          return {
            content: [
              {
                type: "text",
                text: resultText,
              },
            ],
          };
        } catch (error) {
          throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤: ${error.message}`);
        }
      }

      default:
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${name}`);
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ${name}:`, error.message);
    
    await logToolCall(name, args, { error: error.message }, false);
    
    // ü§ñ –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã (—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º)
    await autoSaveKeyMoments(name, args, `–û—à–∏–±–∫–∞ –≤ ${name}: ${error.message}`, []);
    
    return {
      content: [
        {
          type: "text",
          text: `‚ùå **–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ${name}:**\n\n${error.message}\n\nüîß **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:**\n- RAG —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${RAG_SERVER_URL}\n- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã`,
        },
      ],
      isError: true,
    };
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function main() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  
  console.error("üöÄ STDIO MCP Server –∑–∞–ø—É—â–µ–Ω –¥–ª—è Claude Code CLI - –í–ï–†–°–ò–Ø 3.0 –° MEMORY BANK!");
  console.error(`üìä RAG Backend: ${RAG_SERVER_URL}`);
  console.error("üîß RAG –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ask_rag, list_frameworks, get_stats, get_recent_changes, save_key_moment");
  console.error("üìÅ FileSnapshot: open_file, search_files, get_file_history");
  console.error("üè¶ Memory Bank: init_memory_bank, get_memory_context, update_active_context, log_decision, search_memory_bank");
  console.error("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –ê–ö–¢–ò–í–ù–û");
  console.error("üéØ –î–µ—Ç–µ–∫—Ü–∏—è: –æ—à–∏–±–∫–∏, —Ñ–∞–π–ª—ã, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥, —Ä–µ—à–µ–Ω–∏—è");
  console.error("üî• NEW: Memory Bank —Å–∏—Å—Ç–µ–º–∞ –ø–æ –ø—Ä–∏–º–µ—Ä—É Cursor/Cline!");
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  process.exit(1);
});

main().catch(console.error);