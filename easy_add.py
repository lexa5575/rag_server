#!/usr/bin/env python3
"""
üöÄ EasyAdd - –ú–∞–≥–∏—á–µ—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ RAG —Å–∏—Å—Ç–µ–º—É
–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –∞–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥, –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Å–µ–≥–æ!

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python easy_add.py inertia_docs                 # –î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É
    python easy_add.py                              # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º  
    python easy_add.py list                         # –°–ø–∏—Å–æ–∫ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤
    python easy_add.py remove vue                   # –£–¥–∞–ª–∏—Ç—å —Ñ—Ä–µ–π–º–≤–æ—Ä–∫
    python easy_add.py stats                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    python easy_add.py server                       # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
"""

import os
import sys
import json
import yaml
import subprocess
import argparse
from pathlib import Path
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass

@dataclass
class FrameworkInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–µ"""
    name: str
    type: str
    description: str
    path: str
    confidence: float
    settings: Dict[str, Any]

class SmartDetector:
    """–£–º–Ω–æ–µ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤"""
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    DOC_TYPE_PATTERNS = {
        'vitepress': {
            'files': ['.vitepress', 'src/.vitepress', 'docs/.vitepress'],
            'package_indicators': ['vitepress'],
            'confidence': 0.9
        },
        'docusaurus': {
            'files': ['docusaurus.config.js', 'docusaurus.config.ts', 'sidebars.js'],
            'package_indicators': ['@docusaurus/core'],
            'confidence': 0.9
        },
        'gitbook': {
            'files': ['SUMMARY.md', '.gitbook.yaml'],
            'confidence': 0.8
        },
        'sphinx': {
            'files': ['conf.py', 'source/conf.py'],
            'confidence': 0.8
        },
        'mkdocs': {
            'files': ['mkdocs.yml', 'mkdocs.yaml'],
            'confidence': 0.8
        },
        'markdown': {
            'files': ['README.md', 'readme.md'],
            'confidence': 0.3  # –±–∞–∑–æ–≤—ã–π fallback
        }
    }
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤
    FRAMEWORK_PATTERNS = {
        'vue': {
            'keywords': ['vue', 'composition api', 'reactive', 'single file component'],
            'files': ['vue.config.js', 'vite.config.js'],
            'package_indicators': ['vue', '@vue/'],
            'extensions': ['.vue'],
            'confidence_boost': 0.3
        },
        'react': {
            'keywords': ['react', 'jsx', 'hooks', 'component'],
            'files': ['package.json'],
            'package_indicators': ['react', 'react-dom'],
            'extensions': ['.jsx', '.tsx'],
            'confidence_boost': 0.3
        },
        'laravel': {
            'keywords': ['laravel', 'eloquent', 'artisan', 'blade'],
            'files': ['composer.json', 'artisan'],
            'package_indicators': ['laravel/framework'],
            'extensions': ['.php'],
            'confidence_boost': 0.4
        },
        'django': {
            'keywords': ['django', 'models', 'views', 'templates'],
            'files': ['manage.py', 'settings.py'],
            'confidence_boost': 0.4
        },
        'angular': {
            'keywords': ['angular', 'directive', 'service', 'component'],
            'files': ['angular.json'],
            'package_indicators': ['@angular/core'],
            'confidence_boost': 0.3
        },
        'svelte': {
            'keywords': ['svelte', 'reactive', 'compiler'],
            'files': ['svelte.config.js'],
            'package_indicators': ['svelte'],
            'extensions': ['.svelte'],
            'confidence_boost': 0.3
        },
        'inertia': {
            'keywords': ['inertia', 'spa', 'server-side routing', 'single-page', 'modern single-page'],
            'files': ['inertia.php'],
            'package_indicators': ['inertiajs', '@inertiajs'],
            'confidence_boost': 0.5
        }
    }
    
    def detect_documentation_type(self, path: Path) -> Tuple[str, float]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–∏—Å—Ç–µ–º—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        best_type = 'markdown'
        best_confidence = 0.0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json –µ—Å–ª–∏ –µ—Å—Ç—å
        package_json = path / 'package.json'
        if package_json.exists():
            try:
                with open(package_json, 'r', encoding='utf-8') as f:
                    package_data = json.load(f)
                    dependencies = {**package_data.get('dependencies', {}), 
                                  **package_data.get('devDependencies', {})}
                    
                    for doc_type, patterns in self.DOC_TYPE_PATTERNS.items():
                        if 'package_indicators' in patterns:
                            for indicator in patterns['package_indicators']:
                                for dep in dependencies:
                                    if indicator in dep:
                                        confidence = patterns['confidence']
                                        if confidence > best_confidence:
                                            best_type = doc_type
                                            best_confidence = confidence
            except:
                pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        for doc_type, patterns in self.DOC_TYPE_PATTERNS.items():
            for file_pattern in patterns.get('files', []):
                if (path / file_pattern).exists():
                    confidence = patterns['confidence']
                    if confidence > best_confidence:
                        best_type = doc_type
                        best_confidence = confidence
        
        return best_type, best_confidence
    
    def detect_framework(self, path: Path) -> Tuple[str, float, str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (name, confidence, description)"""
        scores = {}
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
        files = list(path.rglob('*'))[:1000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
        extensions = set(f.suffix.lower() for f in files if f.is_file())
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∞–º —Ñ–∞–π–ª–æ–≤
        filenames = set(f.name.lower() for f in files if f.is_file())
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ README –∏ –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        content_keywords = []
        readme_content = ""
        for readme_file in ['README.md', 'readme.md', 'README.txt']:
            readme_path = path / readme_file
            if readme_path.exists():
                try:
                    with open(readme_path, 'r', encoding='utf-8') as f:
                        readme_content = f.read().lower()
                        content_keywords.extend(readme_content.split())
                        break
                except:
                    continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json –¥–ª—è Node.js –ø—Ä–æ–µ–∫—Ç–æ–≤
        package_indicators = []
        package_json = path / 'package.json'
        if package_json.exists():
            try:
                with open(package_json, 'r', encoding='utf-8') as f:
                    package_data = json.load(f)
                    dependencies = {**package_data.get('dependencies', {}), 
                                  **package_data.get('devDependencies', {})}
                    package_indicators = list(dependencies.keys())
            except:
                pass
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Inertia.js –≤ README
        inertia_in_readme = "inertia.js" in readme_content or "inertiajs" in readme_content
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
        for framework, patterns in self.FRAMEWORK_PATTERNS.items():
            score = 0.0
            
            # –ë–æ–Ω—É—Å –¥–ª—è Inertia.js –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –≤ README
            if framework == 'inertia' and inertia_in_readme:
                score += 0.8  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
            for keyword in patterns.get('keywords', []):
                if keyword in readme_content:
                    score += 0.3 if framework == 'inertia' else 0.2
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ package.json
            for indicator in patterns.get('package_indicators', []):
                if any(indicator in pkg for pkg in package_indicators):
                    score += 0.4 if framework == 'inertia' else 0.3
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (–º–µ–Ω—å—à–∏–π –≤–µ—Å –¥–ª—è React/Vue –≤ Inertia –ø—Ä–æ–µ–∫—Ç–µ)
            for ext in patterns.get('extensions', []):
                if ext in extensions:
                    boost = patterns.get('confidence_boost', 0.2)
                    if inertia_in_readme and framework in ['react', 'vue']:
                        boost *= 0.3  # –°–Ω–∏–∂–∞–µ–º –≤–µ—Å –¥–ª—è React/Vue –µ—Å–ª–∏ —ç—Ç–æ Inertia –ø—Ä–æ–µ–∫—Ç
                    score += boost
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã
            for file_pattern in patterns.get('files', []):
                if file_pattern in filenames:
                    score += 0.2
            
            scores[framework] = score
        
        # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if not scores or max(scores.values()) < 0.1:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è —É–≥–∞–¥–∞—Ç—å –ø–æ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
            folder_name = path.name.lower()
            for framework in self.FRAMEWORK_PATTERNS:
                if framework in folder_name:
                    return framework.title(), 0.5, f"{framework.title()} (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏)"
            
            return "Unknown", 0.0, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫"
        
        best_framework = max(scores, key=scores.get)
        confidence = scores[best_framework]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        descriptions = {
            'vue': 'Vue.js - Progressive JavaScript Framework',
            'react': 'React - JavaScript library for building user interfaces',
            'laravel': 'Laravel - PHP Framework for Web Artisans',
            'django': 'Django - High-level Python Web framework',
            'angular': 'Angular - Platform for building mobile and desktop web applications',
            'svelte': 'Svelte - Cybernetically enhanced web apps',
            'inertia': 'Inertia.js - Build single-page apps without building an API'
        }
        
        description = descriptions.get(best_framework, f"{best_framework.title()} framework")
        
        return best_framework.title(), confidence, description
    
    def detect_framework_info(self, path: Path) -> FrameworkInfo:
        """–ü–æ–ª–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–µ"""
        if not path.exists():
            raise ValueError(f"–ü—É—Ç—å {path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        doc_type, doc_confidence = self.detect_documentation_type(path)
        framework_name, fw_confidence, description = self.detect_framework(path)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        settings = self._generate_settings(doc_type, framework_name.lower(), path)
        
        return FrameworkInfo(
            name=framework_name,
            type=doc_type,
            description=description,
            path=str(path),
            confidence=max(doc_confidence, fw_confidence),
            settings=settings
        )
    
    def _generate_settings(self, doc_type: str, framework: str, path: Path) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        
        base_settings = {
            'enabled': True,
            'prefix': framework,
            'file_patterns': ['*.md'],
            'exclude_patterns': ['**/node_modules/**', '**/.git/**'],
            'chunk_settings': {
                'max_size': 2000,
                'overlap': 200
            },
            'content_cleaning': {
                'remove_frontmatter': True,
                'remove_html_tags': True,
                'remove_code_blocks': False
            }
        }
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        if doc_type == 'vitepress':
            base_settings.update({
                'path': str(path / 'src') if (path / 'src').exists() else str(path),
                'content_cleaning': {
                    **base_settings['content_cleaning'],
                    'remove_vue_components': True,
                    'remove_script_tags': True,
                    'remove_style_tags': True
                }
            })
        elif doc_type == 'docusaurus':
            base_settings.update({
                'path': str(path / 'docs') if (path / 'docs').exists() else str(path),
                'file_patterns': ['*.md', '*.mdx']
            })
        else:
            base_settings['path'] = str(path)
        
        return base_settings

class EasyAddManager:
    """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    
    def __init__(self, config_path: str = "config.yaml"):
        self.config_path = config_path
        self.detector = SmartDetector()
        self.config = self._load_config()
    
    def _load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                return yaml.safe_load(f)
        except FileNotFoundError:
            print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª {self.config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            sys.exit(1)
    
    def _save_config(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        with open(self.config_path, 'w', encoding='utf-8') as f:
            yaml.dump(self.config, f, default_flow_style=False, allow_unicode=True, indent=2)
    
    def add_framework_easy(self, folder_path: str, auto_start_server: bool = False) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π"""
        try:
            path = Path(folder_path).resolve()
            
            print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–ø–∫—É: {path}")
            
            # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            framework_info = self.detector.detect_framework_info(path)
            
            print(f"üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω: {framework_info.name} ({framework_info.type})")
            print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {framework_info.description}")
            print(f"üé™ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {framework_info.confidence:.1%}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
            framework_key = framework_info.name.lower().replace(' ', '_').replace('.', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
            if self.config and framework_key in self.config.get('frameworks', {}):
                response = input(f"‚ö†Ô∏è –§—Ä–µ–π–º–≤–æ—Ä–∫ '{framework_key}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? [y/N]: ")
                if response.lower() != 'y':
                    print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
                    return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥
            if not self.config:
                self.config = {}
            if 'frameworks' not in self.config:
                self.config['frameworks'] = {}
            
            self.config['frameworks'][framework_key] = {
                'name': framework_info.name,
                'description': framework_info.description,
                **framework_info.settings
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥
            self._save_config()
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
            print(f"üöÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é...")
            result = subprocess.run([
                sys.executable, 'docs_manager.py', 'add', '--framework', framework_key
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if auto_start_server:
                    print(f"üåê –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
                    self.start_server()
                else:
                    print(f"üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python rag_server.py")
                    print(f"üß™ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python test_system.py")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:")
                print(result.stderr)
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def interactive_mode(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
        print("üéâ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ RAG —Å–∏—Å—Ç–µ–º—É")
        print("=" * 60)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É—Ç—å
        while True:
            folder_path = input("üìÅ –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π: ").strip()
            if not folder_path:
                print("‚ùå –ü—É—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                continue
            
            path = Path(folder_path)
            if not path.exists():
                print(f"‚ùå –ü–∞–ø–∫–∞ {path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                continue
            
            break
        
        # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        try:
            framework_info = self.detector.detect_framework_info(path)
            
            print(f"\nüîç –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:")
            print(f"  üì¶ –§—Ä–µ–π–º–≤–æ—Ä–∫: {framework_info.name}")
            print(f"  üìö –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {framework_info.type}")
            print(f"  üìù –û–ø–∏—Å–∞–Ω–∏–µ: {framework_info.description}")
            print(f"  üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {framework_info.confidence:.1%}")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            response = input(f"\n‚úÖ –í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ? [Y/n]: ").strip().lower()
            if response == 'n':
                framework_info.name = input(f"üì¶ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞: ").strip() or framework_info.name
                framework_info.description = input(f"üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ").strip() or framework_info.description
            
            # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
            auto_server = input(f"\nüåê –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è? [y/N]: ").strip().lower() == 'y'
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
            success = self.add_framework_easy(str(path), auto_server)
            
            if success:
                print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –§—Ä–µ–π–º–≤–æ—Ä–∫ '{framework_info.name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ RAG —Å–∏—Å—Ç–µ–º—É")
            else:
                print(f"\n‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def list_frameworks(self):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤"""
        frameworks = self.config.get('frameworks', {})
        
        if not frameworks:
            print("üì≠ –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤")
            return
        
        print("üìö –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏:")
        print("=" * 60)
        
        for key, config in frameworks.items():
            status = "‚úÖ" if config.get('enabled', True) else "‚è∏Ô∏è"
            name = config.get('name', key)
            description = config.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
            path = config.get('path', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            print(f"{status} {name}")
            print(f"   üìù {description}")
            print(f"   üìÅ {path}")
            print(f"   üîë –ö–ª—é—á: {key}")
            print()
    
    def remove_framework(self, framework_key: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞"""
        frameworks = self.config.get('frameworks', {})
        
        if framework_key not in frameworks:
            print(f"‚ùå –§—Ä–µ–π–º–≤–æ—Ä–∫ '{framework_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.list_frameworks()
            return
        
        framework_name = frameworks[framework_key].get('name', framework_key)
        
        response = input(f"‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ '{framework_name}'? [y/N]: ")
        if response.lower() != 'y':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            return
        
        del self.config['frameworks'][framework_key]
        self._save_config()
        
        print(f"‚úÖ –§—Ä–µ–π–º–≤–æ—Ä–∫ '{framework_name}' —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        print("üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python docs_manager.py rebuild")
    
    def show_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            result = subprocess.run([
                sys.executable, 'docs_manager.py', 'stats'
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                print(result.stdout)
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                print(result.stderr)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def scan_for_frameworks(self, scan_path: str = ".") -> List[Path]:
        """–ê–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        print(f"üîç –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ –≤ {Path(scan_path).resolve()}...")
        
        found_folders = []
        scan_dir = Path(scan_path)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        auto_scan_config = self.config.get('auto_scan', {})
        exclude_patterns = auto_scan_config.get('exclude_patterns', [
            'node_modules', '.git', '.venv', 'venv', '__pycache__',
            '.next', '.nuxt', 'dist', 'build', '.cache', 'coverage'
        ])
        
        doc_indicators = auto_scan_config.get('doc_indicators', [
            'README.md', 'readme.md', 'docs', 'documentation', 'guide',
            '.vitepress', 'docusaurus.config.js', 'mkdocs.yml'
        ])
        
        min_md_files = auto_scan_config.get('min_md_files', 1)  # –°–Ω–∏–∂–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        
        for item in scan_dir.iterdir():
            if not item.is_dir():
                continue
                
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
            if any(exclude in item.name.lower() for exclude in exclude_patterns):
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            has_docs = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            for indicator in doc_indicators:
                if (item / indicator).exists():
                    has_docs = True
                    break
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            md_files = list(item.rglob('*.md'))
            rst_files = list(item.rglob('*.rst'))
            txt_files = list(item.rglob('*.txt'))
            html_files = list(item.rglob('*.html'))
            
            total_doc_files = len(md_files) + len(rst_files) + len(txt_files) + len(html_files)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
            if not has_docs and total_doc_files >= min_md_files:
                has_docs = True
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if has_docs:
                print(f"   ‚úÖ {item.name} - –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {total_doc_files}")
                found_folders.append(item)
            elif total_doc_files > 0:
                print(f"   ‚è≠Ô∏è {item.name} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (—Ñ–∞–π–ª–æ–≤: {total_doc_files}, –º–∏–Ω–∏–º—É–º: {min_md_files})")
        
        print(f"\nüìÇ –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–∞–ø–æ–∫ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π: {len(found_folders)}")
        for folder in found_folders:
            print(f"   üìÅ {folder.name}")
        
        return found_folders
    
    def update_existing_frameworks(self) -> int:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏"""
        updated_count = 0
        frameworks = self.config.get('frameworks', {})
        
        if not frameworks:
            print("üì≠ –ù–µ—Ç —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return 0
        
        print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º {len(frameworks)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤...")
        
        for framework_key, framework_config in frameworks.items():
            if not framework_config.get('enabled', True):
                continue
                
            path = Path(framework_config.get('path', ''))
            if not path.exists():
                print(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ {framework_config['name']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {path}")
                continue
            
            print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º {framework_config['name']}...")
            result = subprocess.run([
                sys.executable, 'docs_manager.py', 'add', '--framework', framework_key
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                updated_count += 1
                print(f"‚úÖ {framework_config['name']} –æ–±–Ω–æ–≤–ª–µ–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {framework_config['name']}")
        
        return updated_count
    
    def smart_sync(self, scan_path: str = ".") -> Dict[str, int]:
        """–£–º–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ + –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ"""
        results = {"new": 0, "updated": 0, "errors": 0}
        
        print("üß† –ó–∞–ø—É—Å–∫–∞–µ–º —É–º–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...")
        
        # 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
        results["updated"] = self.update_existing_frameworks()
        
        # 2. –ò—â–µ–º –Ω–æ–≤—ã–µ –ø–∞–ø–∫–∏
        found_folders = self.scan_for_frameworks(scan_path)
        existing_paths = set()
        
        for framework_config in self.config.get('frameworks', {}).values():
            if 'path' in framework_config:
                existing_paths.add(str(Path(framework_config['path']).resolve()))
        
        # 3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏
        new_folders = []
        for folder in found_folders:
            if str(folder.resolve()) not in existing_paths:
                new_folders.append(folder)
        
        if new_folders:
            print(f"\nüÜï –ù–∞–π–¥–µ–Ω–æ {len(new_folders)} –Ω–æ–≤—ã—Ö –ø–∞–ø–æ–∫ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π:")
            for folder in new_folders:
                print(f"   üìÅ {folder.name}")
            
            print(f"\n‚ûï –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏...")
            
            for folder in new_folders:
                try:
                    print(f"\nüöÄ –î–æ–±–∞–≤–ª—è–µ–º {folder.name}...")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –î–û –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                    initial_stats = self._get_database_stats()
                    initial_count = initial_stats.get('total_documents', 0)
                    
                    success = self.add_framework_easy(str(folder), auto_start_server=False)
                    
                    if success:
                        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ü–û–°–õ–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                        final_stats = self._get_database_stats()
                        final_count = final_stats.get('total_documents', 0)
                        added_chunks = final_count - initial_count
                        
                        print(f"‚úÖ {folder.name} –¥–æ–±–∞–≤–ª–µ–Ω - —Å–æ–∑–¥–∞–Ω–æ {added_chunks} —á–∞–Ω–∫–æ–≤")
                        results["new"] += 1
                        results["chunks_added"] = results.get("chunks_added", 0) + added_chunks
                    else:
                        results["errors"] += 1
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {folder.name}: {e}")
                    results["errors"] += 1
        else:
            print("üîç –ù–æ–≤—ã—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            results["chunks_added"] = 0
        
        return results
    
    def _get_database_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            result = subprocess.run([
                sys.executable, 'docs_manager.py', 'stats'
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                # –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                lines = result.stdout.strip().split('\n')
                for line in lines:
                    if '–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:' in line:
                        count = int(line.split(':')[1].strip())
                        return {"total_documents": count}
            return {"total_documents": 0}
        except:
            return {"total_documents": 0}
    
    def auto_mode(self, scan_path: str = ".") -> bool:
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º: –≤—Å—ë –≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ"""
        print("ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –†–ï–ñ–ò–ú")
        print("=" * 50)
        print("üî• –î–µ–ª–∞–µ–º –í–°–Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:")
        print("   1. –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫–∏")
        print("   2. –ù–∞—Ö–æ–¥–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é")
        print("   3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏")
        print("   4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ")
        print("   5. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä")
        print("=" * 50)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            initial_stats = self._get_database_stats()
            initial_total = initial_stats.get('total_documents', 0)
            
            # –£–º–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            results = self.smart_sync(scan_path)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            final_stats = self._get_database_stats()
            final_total = final_stats.get('total_documents', 0)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"\n" + "="*60)
            print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
            print(f"="*60)
            print(f"üÜï –ù–æ–≤—ã—Ö –ø–∞–ø–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: {results['new']}")
            print(f"üîÑ –§—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {results['updated']}")
            
            chunks_added = results.get('chunks_added', 0)
            if chunks_added > 0:
                print(f"üì¶ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {chunks_added}")
            
            print(f"üìö –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {final_total}")
            print(f"üìà –ü—Ä–∏—Ä–æ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: +{final_total - initial_total}")
            
            if results['errors'] > 0:
                print(f"‚ùå –û—à–∏–±–æ–∫: {results['errors']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞—Ö
            total_frameworks = len(self.config.get('frameworks', {}))
            print(f"\nüéØ –í—Å–µ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {total_frameworks}")
            
            framework_names = list(self.config.get('frameworks', {}).keys())
            if framework_names:
                print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏: {', '.join(framework_names)}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            if total_frameworks > 0:
                print(f"\nüéâ RAG —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
                print(f"üåê –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ http://localhost:8000...")
                print("="*60)
                self.start_server()
                return True
            else:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
                return False
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")
            return False
    
    def start_server(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            print("üåê –ó–∞–ø—É—Å–∫–∞–µ–º RAG —Å–µ—Ä–≤–µ—Ä...")
            print("üîó –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:8000")
            print("‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            
            subprocess.run([sys.executable, 'rag_server.py'])
        except KeyboardInterrupt:
            print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="üöÄ EasyAdd - –ú–∞–≥–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
üî• –ù–û–í–´–ï –°–£–ü–ï–†-–ö–û–ú–ê–ù–î–´:
  python easy_add.py --auto                       # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –†–ï–ñ–ò–ú: –¥–µ–ª–∞–µ—Ç –≤—Å—ë —Å–∞–º!
  python easy_add.py --scan-all                   # –°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –ø–∞–ø–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–µ
  python easy_add.py --smart-sync                 # –£–º–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –Ω–æ–≤—ã–µ + –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  python easy_add.py --update-all                 # –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏

üìù –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:
  python easy_add.py inertia_docs                 # –î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É inertia_docs
  python easy_add.py                              # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
  python easy_add.py list                         # –°–ø–∏—Å–æ–∫ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤  
  python easy_add.py remove vue                   # –£–¥–∞–ª–∏—Ç—å —Ñ—Ä–µ–π–º–≤–æ—Ä–∫
  python easy_add.py stats                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
  python easy_add.py server                       # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
        """
    )
    
    parser.add_argument('action', nargs='?', 
                       help='–î–µ–π—Å—Ç–≤–∏–µ: –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, list, remove, stats, server, –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏')
    parser.add_argument('target', nargs='?', 
                       help='–¶–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–º—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ –¥–ª—è remove)')
    parser.add_argument('--config', default='config.yaml',
                       help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É')
    parser.add_argument('--auto-server', action='store_true',
                       help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')
    
    # –ù–æ–≤—ã–µ —Ñ–ª–∞–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    parser.add_argument('--auto', action='store_true',
                       help='ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –†–ï–ñ–ò–ú: —Å–∫–∞–Ω–∏—Ä—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä')
    parser.add_argument('--scan-all', action='store_true',
                       help='üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–∞–ø–∫–∏ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é')
    parser.add_argument('--smart-sync', action='store_true',
                       help='üß† –£–º–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ + –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ')
    parser.add_argument('--update-all', action='store_true',
                       help='üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏')
    parser.add_argument('--scan-path', default='.',
                       help='–ü—É—Ç—å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞)')
    
    args = parser.parse_args()
    
    manager = EasyAddManager(args.config)
    
    # –ù–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    if args.auto:
        manager.auto_mode(args.scan_path)
        return
    
    elif args.scan_all:
        found_folders = manager.scan_for_frameworks(args.scan_path)
        if found_folders:
            print(f"\nüéØ –ù–∞–π–¥–µ–Ω–æ {len(found_folders)} –ø–∞–ø–æ–∫ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π")
            print("üìã –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python easy_add.py --auto")
        else:
            print("üîç –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    elif args.smart_sync:
        results = manager.smart_sync(args.scan_path)
        print(f"\nüéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üÜï –ù–æ–≤—ã—Ö: {results['new']}, üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {results['updated']}")
        if results.get('chunks_added', 0) > 0:
            print(f"üì¶ –ß–∞–Ω–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {results['chunks_added']}")
        if results['new'] + results['updated'] > 0:
            print("üåê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
            manager.start_server()
        return
    
    elif args.update_all:
        updated = manager.update_existing_frameworks()
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤: {updated}")
        return
    
    # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    if not args.action:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        manager.interactive_mode()
    
    elif args.action == 'list':
        manager.list_frameworks()
    
    elif args.action == 'remove':
        if not args.target:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            manager.list_frameworks()
        else:
            manager.remove_framework(args.target)
    
    elif args.action == 'stats':
        manager.show_stats()
    
    elif args.action == 'server':
        manager.start_server()
    
    else:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
        folder_path = args.action
        manager.add_framework_easy(folder_path, args.auto_server)

if __name__ == "__main__":
    main()
