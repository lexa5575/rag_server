#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Session Manager —Å RAG —Å–µ—Ä–≤–µ—Ä–æ–º
"""

import requests
import json
import time
from typing import Dict, Any

class RAGServerTest:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ RAG —Å–µ—Ä–≤–µ—Ä–∞"""
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.session = requests.Session()
        
    def test_server_status(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        
        response = self.session.get(f"{self.base_url}/")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: {data['message']}")
            print(f"üß† Session Memory: {'–≤–∫–ª—é—á–µ–Ω' if data['session_memory']['enabled'] else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
            return data
        else:
            print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return {}
    
    def test_create_session(self, project_name: str) -> str:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        print(f"üÜï –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: {project_name}")
        
        response = self.session.post(
            f"{self.base_url}/sessions/create",
            params={"project_name": project_name}
        )
        
        if response.status_code == 200:
            data = response.json()
            session_id = data['session_id']
            print(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session_id}")
            return session_id
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {response.status_code}")
            return None
    
    def test_ask_with_memory(self, session_id: str, question: str, 
                           project_name: str = None) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–∞–º—è—Ç—å—é"""
        print(f"üí¨ –ó–∞–ø—Ä–æ—Å —Å –ø–∞–º—è—Ç—å—é: {question}")
        
        payload = {
            "question": question,
            "framework": "laravel",
            "project_name": project_name,
            "session_id": session_id,
            "use_memory": True,
            "save_to_memory": True
        }
        
        response = self.session.post(
            f"{self.base_url}/ask",
            json=payload
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω (–≤—Ä–µ–º—è: {data['response_time']:.2f}s)")
            print(f"üß† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø–∞–º—è—Ç—å: {data['session_context_used']}")
            print(f"üîë –ö–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤: {len(data['key_moments_detected'])}")
            return data
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
            return {}
    
    def test_ide_ask(self, session_id: str, question: str, 
                    file_path: str = None, project_path: str = None) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IDE –∑–∞–ø—Ä–æ—Å–∞"""
        print(f"üñ•Ô∏è IDE –∑–∞–ø—Ä–æ—Å: {question}")
        
        payload = {
            "question": question,
            "file_path": file_path,
            "project_path": project_path,
            "session_id": session_id,
            "use_memory": True,
            "save_to_memory": True,
            "quick_mode": False
        }
        
        response = self.session.post(
            f"{self.base_url}/ide/ask",
            json=payload
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ IDE –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω (–≤—Ä–µ–º—è: {data['response_time']:.2f}s)")
            print(f"üîß –§—Ä–µ–π–º–≤–æ—Ä–∫: {data['framework_detected']}")
            return data
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ IDE –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
            return {}
    
    def test_session_info(self, session_id: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏"""
        print(f"üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏: {session_id}")
        
        response = self.session.get(f"{self.base_url}/sessions/{session_id}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:")
            print(f"   üìÇ –ü—Ä–æ–µ–∫—Ç: {data['project_name']}")
            print(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {data['stats']['total_messages']}")
            print(f"   üîë –ö–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤: {data['stats']['total_key_moments']}")
            return data
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {response.status_code}")
            return {}
    
    def test_add_key_moment(self, session_id: str) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞"""
        print("üîë –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞...")
        
        payload = {
            "moment_type": "feature_completed",
            "title": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Session Manager",
            "summary": "–£—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ —Å RAG —Å–µ—Ä–≤–µ—Ä–æ–º",
            "importance": 8,
            "files": ["rag_server.py", "session_manager.py"],
            "context": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
        }
        
        response = self.session.post(
            f"{self.base_url}/sessions/{session_id}/key-moment",
            params=payload
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ö–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {data['message']}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–º–µ–Ω—Ç–∞: {response.status_code}")
            return False
    
    def test_session_stats(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π"""
        print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π...")
        
        response = self.session.get(f"{self.base_url}/sessions/stats")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:")
            print(f"   üìÅ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {data['total_sessions']}")
            print(f"   üîÄ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {data['unique_projects']}")
            return data
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")
            return {}
    
    def run_integration_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Session Manager + RAG Server")
        print("=" * 70)
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
        server_status = self.test_server_status()
        if not server_status:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç")
            return
        
        print("\n" + "=" * 70)
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        project_name = "test_integration_project"
        session_id = self.test_create_session(project_name)
        if not session_id:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç")
            return
        
        print("\n" + "=" * 70)
        
        # 3. –ù–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        questions = [
            "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å –≤ Laravel?",
            "–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫ –º–æ–¥–µ–ª–∏?",
            "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏?",
            "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π?"
        ]
        
        for i, question in enumerate(questions, 1):
            print(f"\n--- –ó–∞–ø—Ä–æ—Å {i}/4 ---")
            response = self.test_ask_with_memory(session_id, question, project_name)
            if response:
                print(f"üìù –û—Ç–≤–µ—Ç: {response['answer'][:150]}...")
            time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        print("\n" + "=" * 70)
        
        # 4. IDE –∑–∞–ø—Ä–æ—Å
        self.test_ide_ask(
            session_id,
            "–ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏?",
            file_path="/path/to/project/app/Models/User.php",
            project_path="/path/to/project"
        )
        
        print("\n" + "=" * 70)
        
        # 5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞
        self.test_add_key_moment(session_id)
        
        print("\n" + "=" * 70)
        
        # 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏
        self.test_session_info(session_id)
        
        print("\n" + "=" * 70)
        
        # 7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π
        self.test_session_stats()
        
        print("\n" + "=" * 70)
        print("‚úÖ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = RAGServerTest()
    
    try:
        tester.run_integration_test()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {e}")

if __name__ == "__main__":
    main()